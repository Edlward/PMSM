#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.3
# In conjunction with Tcl version 8.6
#    Jul 22, 2014 03:48:54 PM
import sys

import matplotlib
matplotlib.use('TkAgg')

from numpy import arange, sin, pi
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2TkAgg
# implement the default mpl key bindings
from matplotlib.backend_bases import key_press_handler

from matplotlib.figure import Figure

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import PMSMx_Config_Tool_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    root.title('PMSMx Configuration Tool')
    root.geometry('800x600+1992+448')
    PMSMx_Config_Tool_support.set_Tk_var()
    w = New_Toplevel_1 (root)
    PMSMx_Config_Tool_support.init(root, w)
    root.after(100, ConfigTool)
    root.mainloop()

w = None
def create_New_Toplevel_1 (root, param=None):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    w.title('New_Toplevel_1')
    w.geometry('800x600+1992+448')
    PMSMx_Config_Tool_support.set_Tk_var()
    w_win = New_Toplevel_1 (w)
    PMSMx_Config_Tool_support.init(w, w_win, param)
    return w_win

def destroy_New_Toplevel_1 ():
    global w
    w.destroy()
    w = None


def ConfigTool():
    serialBuff = PMSMx_Config_Tool_support.GetSerial()

    if len(serialBuff) > 0:
        if PMSMx_Config_Tool_support.che39.get():
             w.Text1.insert('0.0', serialBuff)
        print (serialBuff)
        sys.stdout.flush()

    root.after(2, ConfigTool);


class New_Toplevel_1:
    def __init__(self, master=None):
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])
        master.configure(borderwidth="2")
        master.configure(background=_bgcolor)
        master.configure(highlightcolor="black")

        self.f = Figure(figsize=(4,3), dpi=100)
        self.a = self.f.add_subplot(111)
        self.t = arange(0.0,3.0,0.01)
        self.s = sin(2*pi*self.t)

        self.a.plot(self.t,self.s)


        self.canvas = FigureCanvasTkAgg(self.f, master=root)
        self.canvas.show()
        self.canvas.get_tk_widget()

        self.toolbar = NavigationToolbar2TkAgg( self.canvas, root )
        self.toolbar.update()
        self.canvas._tkcanvas.pack()
        self.canvas._tkcanvas.place(relx=0.00,rely=0.00,relheight=0.47,relwidth=0.57)


        self.Label1 = Label (master)
        self.Label1.place(relx=0.01,rely=0.48,height=19,width=62)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(background="#ffffff")
        self.Label1.configure(text='''Plot Data:''')

        self.style.map('TCheckbutton',background=
            [('selected', _bgcolor), ('active',_ana2color)])
        self.SpeedPlot = ttk.Checkbutton (master)
        self.SpeedPlot.place(relx=0.1,rely=0.48,relheight=0.03,relwidth=0.07)
        self.SpeedPlot.configure(variable=PMSMx_Config_Tool_support.tch40)
        self.SpeedPlot.configure(takefocus="")
        self.SpeedPlot.configure(text='''Speed''')

        self.Current1Plot = ttk.Checkbutton (master)
        self.Current1Plot.place(relx=0.19,rely=0.48,relheight=0.03
                ,relwidth=0.07)
        self.Current1Plot.configure(variable=PMSMx_Config_Tool_support.tch41)
        self.Current1Plot.configure(takefocus="")
        self.Current1Plot.configure(text='''Curr1''')

        self.Current2Plot = ttk.Checkbutton (master)
        self.Current2Plot.place(relx=0.28,rely=0.48,relheight=0.03
                ,relwidth=0.07)
        self.Current2Plot.configure(variable=PMSMx_Config_Tool_support.tch42)
        self.Current2Plot.configure(takefocus="")
        self.Current2Plot.configure(text='''Curr2''')

        self.BatteryVoltagePlot = ttk.Checkbutton (master)
        self.BatteryVoltagePlot.place(relx=0.36,rely=0.48,relheight=0.03
                ,relwidth=0.06)
        self.BatteryVoltagePlot.configure(variable=PMSMx_Config_Tool_support.tch43)
        self.BatteryVoltagePlot.configure(takefocus="")
        self.BatteryVoltagePlot.configure(text='''PVDD''')

        self.TCheckbutton6 = ttk.Checkbutton (master)
        self.TCheckbutton6.place(relx=0.45,rely=0.48,relheight=0.03
                ,relwidth=0.08)
        self.TCheckbutton6.configure(variable=PMSMx_Config_Tool_support.tch45)
        self.TCheckbutton6.configure(takefocus="")
        self.TCheckbutton6.configure(text='''Tcheck''')

        self.Message1 = Message (master)
        self.Message1.place(relx=0.74,rely=0.02,relheight=0.04,relwidth=0.23)
        self.Message1.configure(borderwidth="2")
        self.Message1.configure(relief=SUNKEN)
        self.Message1.configure(text='''Message''')
        self.Message1.configure(width=185)

        self.TLabel1 = ttk.Label (master)
        self.TLabel1.place(relx=0.59,rely=0.02,height=17,width=117)
        self.TLabel1.configure(background="#d9d9d9")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(relief=FLAT)
        self.TLabel1.configure(text='''Connection Status:''')

        self.RawDataCheck = Checkbutton (master)
        self.RawDataCheck.place(relx=0.27,rely=0.95,relheight=0.04,relwidth=0.3)

        self.RawDataCheck.configure(activebackground="#d9d9d9")
        self.RawDataCheck.configure(text='''Display Raw Data Stream (Debug?)''')
        self.RawDataCheck.configure(variable=PMSMx_Config_Tool_support.che39)

        self.SendConfig = Button (master)
        self.SendConfig.place(relx=0.6,rely=0.93,height=27,width=99)
        self.SendConfig.configure(activebackground="#d9d9d9")
        self.SendConfig.configure(command=PMSMx_Config_Tool_support.SendConfig)
        self.SendConfig.configure(text='''Send Config''')

        self.Button2 = Button (master)
        self.Button2.place(relx=0.74,rely=0.93,height=27,width=98)
        self.Button2.configure(activebackground="#d9d9d9")
        self.Button2.configure(command=PMSMx_Config_Tool_support.ReadConfig)
        self.Button2.configure(text='''Read Config''')

        self.TEntry1 = ttk.Entry (master)
        self.TEntry1.place(relx=0.74,rely=0.08,relheight=0.03,relwidth=0.12)
        self.TEntry1.configure(takefocus="")
        self.TEntry1.configure(cursor="xterm")

        self.SetSpeed = ttk.Button (master)
        self.SetSpeed.place(relx=0.86,rely=0.07,height=26,width=83)
        self.SetSpeed.configure(command=PMSMx_Config_Tool_support.SetSpeed)
        self.SetSpeed.configure(takefocus="")
        self.SetSpeed.configure(text='''Set Speed''')

        self.TLabel2 = ttk.Label (master)
        self.TLabel2.place(relx=0.6,rely=0.08,height=17,width=99)
        self.TLabel2.configure(background="#ffffff")
        self.TLabel2.configure(foreground="#000000")
        self.TLabel2.configure(relief=FLAT)
        self.TLabel2.configure(text='''Speed Setpoint:''')

        self.TLabel3 = ttk.Label (master)
        self.TLabel3.place(relx=0.6,rely=0.13,height=21,width=288)
        self.TLabel3.configure(background="#ffffff")
        self.TLabel3.configure(foreground="#000000")
        self.TLabel3.configure(relief=FLAT)
        self.TLabel3.configure(justify=CENTER)
        self.TLabel3.configure(text='''DRV8301 Configuration Settings:''')
        self.TLabel3.configure(underline="0")

        self.TLabel5 = ttk.Label (master)
        self.TLabel5.place(relx=0.61,rely=0.42,height=17,width=153)
        self.TLabel5.configure(background="#ffffff")
        self.TLabel5.configure(foreground="#000000")
        self.TLabel5.configure(relief=FLAT)
        self.TLabel5.configure(text='''OT/OC HW Pin Reporting:''')

        self.TLabel6 = ttk.Label (master)
        self.TLabel6.place(relx=0.6,rely=0.17,height=17,width=119)
        self.TLabel6.configure(background="#ffffff")
        self.TLabel6.configure(foreground="#000000")
        self.TLabel6.configure(relief=FLAT)
        self.TLabel6.configure(text='''Gate Current Drive:''')

        self.TLabel7 = ttk.Label (master)
        self.TLabel7.place(relx=0.6,rely=0.25,height=17,width=191)
        self.TLabel7.configure(background="#ffffff")
        self.TLabel7.configure(foreground="#000000")
        self.TLabel7.configure(relief=FLAT)
        self.TLabel7.configure(text='''Gate Current Limiting Settings:''')

        self.TLabel8 = ttk.Label (master)
        self.TLabel8.place(relx=0.6,rely=0.33,height=17,width=189)
        self.TLabel8.configure(background="#ffffff")
        self.TLabel8.configure(foreground="#000000")
        self.TLabel8.configure(relief=FLAT)
        self.TLabel8.configure(text='''Overcurrent Voltage Trip Point:''')

        self.TLabel9 = ttk.Label (master)
        self.TLabel9.place(relx=0.6,rely=0.5,height=17,width=180)
        self.TLabel9.configure(background="#ffffff")
        self.TLabel9.configure(foreground="#000000")
        self.TLabel9.configure(relief=FLAT)
        self.TLabel9.configure(text='''Current Sense Amplifier Gain:''')

        self.TLabel10 = ttk.Label (master)
        self.TLabel10.place(relx=0.6,rely=0.58,height=17,width=142)
        self.TLabel10.configure(background="#ffffff")
        self.TLabel10.configure(foreground="#000000")
        self.TLabel10.configure(relief=FLAT)
        self.TLabel10.configure(text='''Over-Current Handling:''')

        self.Text1 = Text (master)
        self.Text1.place(relx=0.01,rely=0.52,relheight=0.43,relwidth=0.57)
        self.Text1.configure(background="white")
        self.Text1.configure(font="TkTextFont")
        self.Text1.configure(selectbackground="#c4c4c4")
        self.Text1.configure(width=456)

        self.GateDriveSetting = ttk.Combobox (master)
        self.GateDriveSetting.place(relx=0.6,rely=0.2,relheight=0.03
                ,relwidth=0.36)
        self.GateDriveSetting.configure(textvariable=PMSMx_Config_Tool_support.combobox1)
        self.GateDriveSetting.configure(takefocus="")
        self.GateDriveList = ['1.7 Amps Max', '700 mA Max', '250mA Max'] 
        self.GateDriveSetting.configure(values=self.GateDriveList)

        self.GateCurrentSetting = ttk.Combobox (master)
        self.GateCurrentSetting.place(relx=0.6,rely=0.28,relheight=0.03
                ,relwidth=0.36)
        self.GateCurrentSetting.configure(textvariable=PMSMx_Config_Tool_support.combobox2)
        self.GateCurrentSetting.configure(takefocus="")
        self.GateCurrentList = ['Limit on OC', 'Latched Shutdown on OC', 'Only report on OC', 'No action on OC'] 
        self.GateCurrentSetting.configure(values=self.GateCurrentList)

        self.OCSetting = ttk.Combobox (master)
        self.OCSetting.place(relx=0.6,rely=0.37,relheight=0.03,relwidth=0.36)
        self.OCSetting.configure(textvariable=PMSMx_Config_Tool_support.combobox3)
        self.OCSetting.configure(takefocus="")
        self.OCSettingList = ['.060 Volts', '.068 Volts', '.076 Volts', '.086 Volts', '.097 Volts', '.109 Volts', '.123 Volts', '.138 Volts', '.155 Volts'
                                , '.175 Volts', '.197 Volts', '.222 Volts', '.250 Volts', '.282 Volts', '.317 Volts', '.358 Volts', '.403 Volts', '.454 Volts'
                                , '.511 Volts', '.576 Volts', '.648 Volts', '.730 Volts', '.822 Volts', '.926 Volts', '1.043 Volts', '1.175 Volts', '1.324 Volts'
                                , '1.491 Volts'] 
        self.OCSetting.configure(values=self.OCSettingList)

        self.OCTWSetting = ttk.Combobox (master)
        self.OCTWSetting.place(relx=0.6,rely=0.45,relheight=0.03,relwidth=0.36)
        self.OCTWSetting.configure(textvariable=PMSMx_Config_Tool_support.combobox4)
        self.OCTWSetting.configure(takefocus="")
        self.OCTWSettingList = ['Report OT/OC on OCTW', 'Report OT on OCTW', 'Report OC at OCTW']
        self.OCTWSetting.configure(values=self.OCTWSettingList)

        self.CurrentSenseAmp = ttk.Combobox (master)
        self.CurrentSenseAmp.place(relx=0.6,rely=0.53,relheight=0.03
                ,relwidth=0.36)
        self.CurrentSenseAmp.configure(textvariable=PMSMx_Config_Tool_support.combobox5)
        self.CurrentSenseAmp.configure(takefocus="")
        self.CurrentSenseAmpList = ['10V/V Gain', '20V/V Gain', '40V/V Gain', '80V/V Gain']
        self.CurrentSenseAmp.configure(values=self.CurrentSenseAmpList)

        self.OCHandleSetting = ttk.Combobox (master)
        self.OCHandleSetting.place(relx=0.6,rely=0.62,relheight=0.03
                ,relwidth=0.36)
        self.OCHandleSetting.configure(textvariable=PMSMx_Config_Tool_support.combobox6)
        self.OCHandleSetting.configure(takefocus="")
        self.OCHandleSettingList = ['Cycle By Cycle', 'Off Time']
        self.OCHandleSetting.configure(values=self.OCHandleSettingList)




if __name__ == '__main__':
    vp_start_gui()



